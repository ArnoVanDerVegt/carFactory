; Copyright (c) 2021 - present by {yourName}
; Distributed under an MIT

#include "lib/modules/components/label.whl"
#include "lib/modules/components/statusLight.whl"
#include "lib/modules/bit.whl"
#include "inventory/Order.whl"
#include "car/Car.whl"
#include "robot/Robots.whl"
#include "factoryData.whl"

#define POSITION_BASE_STORED     0
#define POSITION_CONVEYOR_ROBOT1 1
#define POSITION_CONVEYOR_ROBOT2 2
#define POSITION_CONVEYOR_ROBOT3 3
#define POSITION_CONVEYOR_ROBOT4 4
#define POSITION_CONVEYOR_ROBOT5 5

object Cars
    Car      car0
    Car      car1
    Car      car2
    Car      car3
    ^Car     cars[4]
    Robots   ^robots
    Conveyor ^conveyor
    number   count
    number   isRunningOrder
    number   isBaseLoaded
    number   positions[10]
    number   activeCars
    number   activeCar
end

proc Cars.init()
    cars[0] = @car0
    cars[1] = @car1
    cars[2] = @car2
    cars[3] = @car3
    count = 0
    activeCars = 0
    activeCar = 0
    isRunningOrder = FALSE
    isBaseLoaded   = FALSE
    number i
    for i = 0 to 9
        positions[i] = -1
    end
end

proc Cars.setRobots(Robots ^robots)
    self.robots = robots
end

proc Cars.setConveyor(Conveyor ^conveyor)
    self.conveyor = conveyor
end

proc Cars.setStateAndCount(number index, number state, number count)
    printS("index,state,count")
    printN(index)
    printN(state)
    printN(count)
    cars[index].state = state
    cars[index].count = count
end

proc Cars.order(Order ^order)
    number bodyLabels[4] = [
        FACTORY_FORM_CAR1_BODY_LABEL,
        FACTORY_FORM_CAR2_BODY_LABEL,
        FACTORY_FORM_CAR3_BODY_LABEL,
        FACTORY_FORM_CAR4_BODY_LABEL
    ]
    number seatLabels[4] = [
        FACTORY_FORM_CAR1_SEAT_LABEL,
        FACTORY_FORM_CAR2_SEAT_LABEL,
        FACTORY_FORM_CAR3_SEAT_LABEL,
        FACTORY_FORM_CAR4_SEAT_LABEL
    ]
    number n
    for n = 0 to 3
        with order.orderLine[n]
            cars[n].setOrder(seat, body)
            components.label.setValueString(mainWindow, bodyLabels[n], bodyColors[body])
            components.label.setValueString(mainWindow, seatLabels[n], seatColors[seat])
        end
    end
    isRunningOrder = TRUE
end

proc Cars.updatePositionStatusLights()
    number positionLabels[6] = [
        0,
        FACTORY_FORM_POSITION1_STATUS_LIGHT,
        FACTORY_FORM_POSITION2_STATUS_LIGHT,
        FACTORY_FORM_POSITION3_STATUS_LIGHT,
        FACTORY_FORM_POSITION4_STATUS_LIGHT,
        FACTORY_FORM_POSITION5_STATUS_LIGHT
    ]
    number i
    for i = 1 to 5
        number color = 5
        if (positions[i] == -1)
            color = 3
        end
        components.statusLight.setColor(mainWindow, positionLabels[i], color)
    end
end

proc Cars.updateStateLabels()
    number stateLabels[4] = [
        FACTORY_FORM_CAR1_STATE_LABEL,
        FACTORY_FORM_CAR2_STATE_LABEL,
        FACTORY_FORM_CAR3_STATE_LABEL,
        FACTORY_FORM_CAR4_STATE_LABEL
    ]
    number i
    for i = 0 to 3
        number state = cars[i].state
        components.label.setText(mainWindow, stateLabels[i], carStates[state])
    end
end

proc Cars.updateCar(number index)
    number state = cars[index].state
    select state
        case CAR_STATE_BASE:
            if (positions[POSITION_CONVEYOR_ROBOT1] == -1) and (positions[POSITION_CONVEYOR_ROBOT2] == -1)
                if robots.isRobotFinished[0] and robots.isRobotFinished[1]
                    positions[POSITION_CONVEYOR_ROBOT1] = index
                    if (index == 2) and (isBaseLoaded == FALSE)
                        setStateAndCount(index, CAR_STATE_LOADING_BASES, 0)
                    else
                        if (bitAnd(index, 1) == 0)
                            robots.startSequence(0, ROBOT1_SEQUENCE_PICKUP1)
                        else
                            robots.startSequence(0, ROBOT1_SEQUENCE_PICKUP2)
                        end
                        setStateAndCount(index, CAR_STATE_LOADING_BASE, 10)
                    end
                end
            end
            break
        case CAR_STATE_LOADING_BASES:
            if robots.isRobotFinished[0] and robots.isRobotFinished[1]
                isBaseLoaded = TRUE
                robots.startSequence(0, ROBOT1_SEQUENCE_LOAD)
                positions[POSITION_CONVEYOR_ROBOT1] = -1
                setStateAndCount(index, CAR_STATE_BASE, 10)
            end
            break
        case CAR_STATE_LOADING_BASE:
            if robots.isRobotFinished[0]
                if (activeCars < 2)
                    activeCars++
                end
                setStateAndCount(index, CAR_STATE_WAITING_FOR_SEAT, 0)
            end
            break
        case CAR_STATE_WAITING_FOR_SEAT:
            if (positions[POSITION_CONVEYOR_ROBOT2] == -1) and (conveyor.isBarDown == FALSE)
                if robots.isRobotFinished[0] and robots.isRobotFinished[1]
                    positions[POSITION_CONVEYOR_ROBOT2] = index
                    positions[POSITION_CONVEYOR_ROBOT1] = -1
                    conveyor.move1to2()
                    setStateAndCount(index, CAR_STATE_CLOSE_SEAT_BAR, 0)
                end
            end
            break
        case CAR_STATE_CLOSE_SEAT_BAR:
            if (conveyor.isBarDown == FALSE)
                conveyor.barDown()
            end
            setStateAndCount(index, CAR_STATE_INSTALL_SEAT, 0)
            break
        case CAR_STATE_INSTALL_SEAT:
            if (conveyor.isBarDown == FALSE)
                setStateAndCount(index, CAR_STATE_CLOSE_SEAT_BAR, 0)
            else
                setStateAndCount(index, CAR_STATE_WAIT_FOR_SEAT_INSTALL, 5)
                if (cars[index].seat == SEAT_COLOR_TAN)
                    robots.startSequence(1, ROBOT2_SEQUENCE_PICKUP2)
                else
                    robots.startSequence(1, ROBOT2_SEQUENCE_PICKUP1)
                end
            end
            break
        case CAR_STATE_WAIT_FOR_SEAT_INSTALL:
            number nextPosition
            if (cars[index].body >= BODY_COLOR_BROWN)
                nextPosition = POSITION_CONVEYOR_ROBOT4
            else
                nextPosition = POSITION_CONVEYOR_ROBOT3
            end
            if robots.isRobotFinished[1]
                if (positions[POSITION_CONVEYOR_ROBOT3] == -1) and (positions[nextPosition] == -1)
                    positions[POSITION_CONVEYOR_ROBOT2] = -1
                    if (conveyor.isBarDown)
                        conveyor.barUp()
                    end
                    conveyor.move2to3()
                    if (cars[index].body >= BODY_COLOR_BROWN)
                        conveyor.move3to4()
                    end
                    positions[nextPosition] = index
                    setStateAndCount(index, CAR_STATE_CLOSE_BODY_BAR, 0)
                end
            end
            break
        case CAR_STATE_CLOSE_BODY_BAR:
            if (conveyor.isBarDown == FALSE)
                conveyor.barDown()
            end
            setStateAndCount(index, CAR_STATE_INSTALL_BODY, 0)
            break
        case CAR_STATE_INSTALL_BODY:
            if robots.isRobotFinished[1] and robots.isRobotFinished[2] and robots.isRobotFinished[3]
                if (conveyor.isBarDown == FALSE)
                    setStateAndCount(index, CAR_STATE_CLOSE_BODY_BAR, 0)
                else
                    number body = cars[index].body
                    select body
                        case BODY_COLOR_RED:
                            robots.startSequence(2, ROBOT3_SEQUENCE_PICKUP_DROP2)
                            setStateAndCount(index, CAR_STATE_WAIT_FOR_BODY_INSTALL, 10)
                            cars[index].bodyRobot = 2
                            break
                        case BODY_COLOR_BLUE:
                            robots.startSequence(2, ROBOT3_SEQUENCE_PICKUP_DROP1)
                            setStateAndCount(index, CAR_STATE_WAIT_FOR_BODY_INSTALL, 10)
                            cars[index].bodyRobot = 2
                            break
                        case BODY_COLOR_GREEN:
                            robots.startSequence(3, ROBOT4_SEQUENCE_PICKUP_DROP2)
                            setStateAndCount(index, CAR_STATE_WAIT_FOR_BODY_INSTALL, 10)
                            cars[index].bodyRobot = 3
                            break
                        case BODY_COLOR_BROWN:
                            robots.startSequence(3, ROBOT4_SEQUENCE_PICKUP_DROP1)
                            setStateAndCount(index, CAR_STATE_WAIT_FOR_BODY_INSTALL, 10)
                            cars[index].bodyRobot = 3
                            break
                    end
                end
            end
            break
        case CAR_STATE_WAIT_FOR_BODY_INSTALL:
            number bodyRobot = cars[index].bodyRobot
            if robots.isRobotFinished[bodyRobot]
                if (positions[POSITION_CONVEYOR_ROBOT4] == index)
                    setStateAndCount(index, CAR_STATE_INSTALL_BODY_DONE_BAR_UP, 0)
                elseif (positions[POSITION_CONVEYOR_ROBOT4] == -1)
                    if (cars[index].body < BODY_COLOR_BROWN)
                        if (conveyor.isBarDown)
                            conveyor.barUp()
                        end
                        conveyor.move3to4()
                        positions[POSITION_CONVEYOR_ROBOT3] = -1
                        positions[POSITION_CONVEYOR_ROBOT4] = index
                    end
                    setStateAndCount(index, CAR_STATE_INSTALL_BODY_DONE_BAR_UP, 0)
                end
            end
            break
        case CAR_STATE_INSTALL_BODY_DONE_BAR_UP:
            if (conveyor.isBarDown)
                conveyor.barUp()
            end
            setStateAndCount(index, CAR_STATE_INSTALL_BODY_DONE, 0)
            break
        case CAR_STATE_INSTALL_BODY_DONE:
            if (positions[POSITION_CONVEYOR_ROBOT5] == -1)
                if robots.isRobotFinished[4]
                    robots.startSequence(4, ROBOT4_SEQUENCE_MOVE_TO4)
                    setStateAndCount(index, CAR_STATE_WAITING_FOR_STORAGE, 2)
                end
            end
            break
        case CAR_STATE_WAITING_FOR_STORAGE:
            if robots.isRobotFinished[4]
                if (conveyor.isBarDown == FALSE)
                    conveyor.move4to5()
                    positions[POSITION_CONVEYOR_ROBOT4] = -1
                    positions[POSITION_CONVEYOR_ROBOT5] = index
                    setStateAndCount(index, CAR_STATE_SELECT_STORAGE, 2)
                end
            end
            break
        case CAR_STATE_SELECT_STORAGE:
            if robots.isRobotFinished[4]
                robots.startSequence(4, ROBOT4_SEQUENCE_MOVE_TO1 + index * 2)
                setStateAndCount(index, CAR_STATE_WAITING_FOR_SELECT_STORAGE, 0)
            end
            break
        case CAR_STATE_WAITING_FOR_SELECT_STORAGE:
            if robots.isRobotFinished[4]
                conveyor.move5()
                positions[POSITION_CONVEYOR_ROBOT5] = -1
                setStateAndCount(index, CAR_STATE_FINISHED, 0)
            end
            break
    end
end

proc Cars.update()
    if not isRunningOrder
        ret
    end
    count++
    if (count < 12)
        ret
    end
    count = 0
    activeCar++
    if (activeCar > activeCars)
        activeCar = 0
    end
    if (cars[activeCar].count > 0)
        cars[activeCar].count--
    else
        updateCar(activeCar)
    end
    updatePositionStatusLights()
    updateStateLabels()
end
