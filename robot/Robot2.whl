; Wheel, copyright (c) 2020 - present by {yourName}
; Distributed under an {yourLicense}

#include "robot/RobotWithMoves.whl"

#define ROBOT2_MOVE_TO_CONVEYOR 0
#define ROBOT2_PICKUP1          1
#define ROBOT2_PICKUP2          2

#define ROBOT2_SEQUENCE_PICKUP1 0
#define ROBOT2_SEQUENCE_PICKUP2 3

object Robot2 extends RobotWithMoves
    RobotMoves moveToConveyorList
    RobotMoves pickup1List
    RobotMoves pickup2List
end

proc Robot2.initMoveToConveyorList()
    with moveToConveyorList
        initList()
        add(99,  2450,    NO_MOVE, NO_MOVE, NO_MOVE)    ; Turn to conveyor
        add(99,  NO_MOVE, 725,     -1550,   NO_MOVE)    ; Move up
        add(99,  -400,    NO_MOVE, NO_MOVE, NO_MOVE)    ; Turn to conveyor
        add(99,  NO_MOVE, 2000,    -2600,   NO_MOVE)    ; Move down
        add(-75, NO_MOVE, NO_MOVE, NO_MOVE, HAND_OPEN)  ; Open hand
        add(99,  NO_MOVE, 900,     -200,    NO_MOVE)    ; Move up
        add(99,  0,       0,       0,       NO_MOVE)    ; Reset
    end
end

proc Robot2.initPickup1List()
    with pickup1List
        initList()
        add(-75, NO_MOVE, NO_MOVE, NO_MOVE, HAND_OPEN)  ; Open hand
        add(99,  NO_MOVE, 800,     -1800,   NO_MOVE)    ; Move down

        add(99,  2550,    NO_MOVE, NO_MOVE, NO_MOVE)    ; Move to position rack
        add(99,  NO_MOVE, 950,     -2600,   NO_MOVE)    ; Move down
        add(99,  4800,    NO_MOVE, NO_MOVE, NO_MOVE)    ; Move to position rack
        add(99,  NO_MOVE, 2200,    -4100,   NO_MOVE)    ; Move down
        add(50,  NO_MOVE, NO_MOVE, NO_MOVE, HAND_CLOSE) ; Close hand

        add(99,  4700,    250,     -2000,   NO_MOVE)    ; Move up
    end
end

proc Robot2.initPickup2List()
    with pickup2List
        initList()
        add(-75, NO_MOVE, NO_MOVE, NO_MOVE, HAND_OPEN)  ; Open hand
        add(99,  NO_MOVE, 800,     -1800,   NO_MOVE)    ; Move down

        add(99,  2450,    NO_MOVE, NO_MOVE, NO_MOVE)    ; Move to position rack
        add(99,  NO_MOVE, 2200,    -1250,   NO_MOVE)    ; Move down
        add(99,  5050,    NO_MOVE, NO_MOVE, NO_MOVE)    ; Move to position rack
        add(99,  NO_MOVE, 3400,    -1500,   NO_MOVE)    ; Move down
        add(50,  NO_MOVE, NO_MOVE, NO_MOVE, HAND_CLOSE) ; Close hand

        add(99,  4950,    1450,    -450,    NO_MOVE)    ; Move up
    end
end

proc Robot2.initSequence()
    addSequence(ROBOT2_PICKUP1)
    addSequence(ROBOT2_MOVE_TO_CONVEYOR)
    addSequence(SEQUENCE_END)

    addSequence(ROBOT2_PICKUP2)
    addSequence(ROBOT2_MOVE_TO_CONVEYOR)
    addSequence(SEQUENCE_END)
end

proc Robot2.init()
    super()
    
    with robotConfig.motor0
        resetDir    = -1
        layer       = LAYER_3
        port        = OUTPUT_C
        sensorLayer = LAYER_4
        sensorPort  = OUTPUT_B
    end
    with robotConfig.motor1    
        resetDir    = -1
        layer       = LAYER_3
        port        = OUTPUT_D
        sensorLayer = LAYER_3
        sensorPort  = OUTPUT_B
    end
    with robotConfig.motor2
        resetDir    = 1
        layer       = LAYER_4
        port        = OUTPUT_C
        sensorLayer = LAYER_4
        sensorPort  = OUTPUT_A
    end
    with robotConfig.motor3
        layer       = LAYER_3
        port        = OUTPUT_A
    end
    with robotConfig.readyBits0
        layer       = LAYER_3
        bits        = MOTOR_BITS_CD
    end
    with robotConfig.readyBits1
        layer       = LAYER_4
        bits        = MOTOR_BITS_C
    end

    robotConfig.turnReset = 980

    initMoveToConveyorList()
    initPickup1List()
    initPickup2List()
        
    addMovesList(@moveToConveyorList)
    addMovesList(@pickup1List)
    addMovesList(@pickup2List)
    
    initSequence()
end
