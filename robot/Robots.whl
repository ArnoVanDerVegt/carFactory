; Wheel, copyright (c) 2020 - present by Arno van der Vegt
; Distributed under an MIT

#include "lib/modules/components/statusLight.whl"
#include "lib/modules/bit.whl"

#include "robot/Robot1.whl"
#include "robot/Robot2.whl"
#include "robot/Robot3.whl"
#include "robot/Robot4.whl"
#include "robot/Robot5.whl"

#include "factoryData.whl"

record RobotCommand
    number command
    number motorIndex
end

object Robots
    number             readyBits
    Robot1             robot1
    Robot2             robot2
    Robot3             robot3
    Robot4             robot4
    Robot5             robot5
    number             isRobotReady[5]
    number             isRobotFinished[5]
    ^RobotWithMoves    robots[5]
    RobotWithMoves     ^activeRobot
    number             activeRobotIndex
end

proc Robots.init()
    robots[0] = @robot1
    robots[1] = @robot2
    robots[2] = @robot3
    robots[3] = @robot4
    robots[4] = @robot5

    activeRobotIndex = 0
    activeRobot      = robots[0]

    robot1.init()
    robot2.init()
    robot3.init()
    robot4.init()
    robot5.init()
end

proc Robots.updateStatusLight()
    number lightComponents[5] = [
        FACTORY_FORM_STATUS_ROBOT1,
        FACTORY_FORM_STATUS_ROBOT2,
        FACTORY_FORM_STATUS_ROBOT3,
        FACTORY_FORM_STATUS_ROBOT4,
        FACTORY_FORM_STATUS_ROBOT5
    ]
    number i

    for i = 0 to 4
        number color = 5
        if isRobotReady[i]
            color = 3
        end
        components.statusLight.setColor(mainWindow, lightComponents[i], color)
    end
end

proc Robots.update()
    number i
    number bit = 1
    readyBits = 0

    for i = 0 to 4
        robots[i].updateSequence()
        if robots[i].isReady
            readyBits       = bitOr(readyBits, bit)
            isRobotReady[i] = TRUE
        else
            isRobotReady[i] = FALSE
        end
        isRobotFinished[i] = robots[i].isFinished
        bit *= 2
    end
    updateStatusLight()
end

proc Robots.setActiveRobot(number value)
    activeRobotIndex = value
    activeRobot = robots[value]
end

proc Robots.reset()
    isRobotReady[activeRobotIndex] = FALSE
    updateStatusLight()
    activeRobot.reset()
    isRobotReady[activeRobotIndex] = TRUE
end

proc Robots.rev(number motorIndex)
    activeRobot.rev(motorIndex)
end

proc Robots.fwd(number motorIndex)
    activeRobot.fwd(motorIndex)
end

proc Robots.stop(number motorIndex)
    activeRobot.stop(motorIndex)
end

proc Robots.startSequence(number index, number sequence)
    isRobotReady[activeRobotIndex] = FALSE
    updateStatusLight()
    robots[index].startSequence(sequence)
end

proc Robots.stopAll()
    number i

    for i = 0 to 3
        robots[i].stopAll()
    end
end
